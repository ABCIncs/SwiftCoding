//
//  NetworkManager.swift
//
//  Created by Steven Curtis on 29/04/2019.
//  Copyright Â© 2019 Steven Curtis. All rights reserved.
//

import Foundation

/// Errors that will be generated by the NetworkManager
enum NetworkError: Error, Equatable {
    case invalidURL
    case noInternet
    case invalidResponse(Data?, URLResponse?)
    case accessForbidden
}

class NetworkManager<T: URLSessionProtocol> {
    let session: T

    required init(session: T) {
        self.session = session
    }
    
    
//    func get(url: URL, completionBlock: @escaping (Result<Data, Error>) -> Void) {
//        if let dta = data {
//            if willSucceed {
//                completionBlock(.success(dta))
//            } else {
//                completionBlock(.failure(ErrorModel(errorDescription: "Error from Mock HTTPManager")))
//            }
//        }
//    }
    
    

    ///  Get data through an API call using a URL, returning a result type
    ///
    /// - Parameters:
    ///   - url: A URL represting the location of the resource
    ///   - completionBlock: A completion closure returning the result type
    public func get(url: URL, completionBlock: @escaping (Result<Data, Error>) -> Void) {
        var request = URLRequest(url: url, cachePolicy: .reloadIgnoringLocalCacheData, timeoutInterval: 60)
        request.httpMethod = "Get"
        let task = session.dataTask(with: request) { data, response, error in

            guard error == nil else {
                completionBlock(.failure(error!))
                return
            }
            guard
                let _ = data,
                let httpResponse = response as? HTTPURLResponse,
                200 ..< 300 ~= httpResponse.statusCode
                else {
                    if let httpResponse = response as? HTTPURLResponse {
                    let statusCode = httpResponse.statusCode
                        if statusCode == 403 {
                            completionBlock(.failure(NetworkError.accessForbidden))
                            return
                        }
                    }

                    completionBlock(.failure(NetworkError.invalidResponse(data, response)))
                    return
            }

            if let data = data {
                completionBlock(.success(data))
            }
        }
        task.resume()
    }
}
